---
layout: post
title:  "쿠버네티스 Admission Control #2 - Open Policy Agent"
date:   2021-05-04 00:00:00
categories: kubernetes admission-control
image: /assets/images/opa/landing-ac.png
---
[지난 쿠버네티스 Admission Control #1](https://coffeewhale.com/kubernetes/admission-control/2021/04/28/opa1/)에서는 Admission Control의 개념에 대해 알아보았고 직접 Custom Admission Control을 만들어 봤습니다. 이번 시간에는 General Policy Controller인 Open Policy Agent(OPA)에 대해서 알아보고 OPA Policy를 이용하여 사용자의 세부 사용성을 관리해 보겠습니다.

쿠버네티스 Admission Control 시리즈
1. [사용자 Webhook](https://coffeewhale.com/kubernetes/admission-control/2021/04/28/opa1/): 사용자가 직접 webhook을 구현함으로써 세밀한 접근관리를 수행합니다.
2. Open Policy Agent: OPA의 개념과 그 Query 언어인 Rego에 대해서 살펴 봅니다.
3. Open Policy Agent 적용: OPA를 직접 쿠버네티스에 적용해 봅니다.

## Open Policy Agent란?

OPA는 플랫폼 관리자에게 체계적이고 세밀한(fine-graded) 권한관리를 손쉽게 할 수 있는 툴을 제공하는 오픈소스입니다. OPA는 쿠버네티스 뿐만 아니라 OPA 엔진을 이해하는 어떠한 플랫폼 위에서도 동작합니다. OPA는 실제로 요청을 막는 메커니즘은 구현되어 있지 않습니다. 그것은 각 플랫폼마다 다르기 때문에 그 플랫폼의 메커니즘을 그대로 사용합니다. 대신 OPA는 관리자가 작성한 Policy를 읽고 해당 요청을 허용할지 반려할지만을 판단합니다. 각 플랫폼에서는 OPA의 판단 내용을 기반하여 실제 Admission Control 동작을 수행합니다.

Part#1에서 살펴본 flask webhook을 살펴 보겠습니다. 해당 webhook도 단지 들어 온 요청을 반려할지 말지만을 판단(`response.allowed`) 하였고 실제 동작은 쿠버네티스에서 수행하였습니다. 이와 마찬가지로 OPA도 관리자가 작성한 Policy를 기반하여 플랫폼에게 Admission Control의 결과를 전달합니다. 해당 포스트에서는 쿠버네티스 플랫폼 위에서의 OPA 사용을 중심으로 설명드립니다.

혹자는 OPA의 역할이 너무 제한적이지 않는가에 대해 의문을 가질 수도 있습니다. 실제 Admission을 수행하는 메커니즘(enforcement)은 없고 정책(Policy)만을 판단하는 엔진은 마치 집행력이 없는 사법부와 같은 느낌을 줍니다. 이에 대한 [OPA만의 철학으로 Policy Decoupling의 중요성]((https://www.openpolicyagent.org/docs/latest/philosophy/)을 얘기합니다. 간단하게 정리하자면 다음과 같습니다.

Policy를 Admission enforcement로부터 분리(decouping)했을 때의 이점으로,

- 재컴파일, 재배포 없이 관리자 정책을 변경할 수 있습니다.
- 공통된 정책을 다양한 플랫폼에 일관되게 적용할 수 있습니다.
- 정책을 정의하고 유지보수하는 작업을 줄일 수 있습니다.

![](/assets/images/opa/opa.png)
*출처: [https://www.openpolicyagent.org/docs/latest](https://www.openpolicyagent.org/docs/latest)*

OPA의 전반적인 모습은 위와 같습니다. `Service`라고 표현되어 있는 부분이 OPA를 사용하는 플랫폼입니다. 여기서는 쿠버네티스가 되겠죠. Service는 OPA 엔진에게 요청에 대해서 허용 여부를 질의합니다. 이때 사용되는 인터페이스는 JSON 객체입니다. (Part#1에서 살펴 본 webhook의 input, output 인터페이스를 생각하면 됩니다.) 질의를 요청 받은 OPA는 저장된 Policy를 불러와서 요청에 대해 평가(evaluate)하고 그 결과를 다시 JSON 형식으로 Service에 반환합니다.

## Rego Language

OPA는 **Policy**를 기반하여 그 정책에 맞게 사용자 접근을 관리합니다. Policy는 OPA에서 핵심적인 역할을 담당합니다. OPA를 어떻게 사용하는가는 이 Policy를 어떻게 작성하느냐에 따라 달려 있습니다. OPA에서는 Policy를 Rego라는 자체적인 질의언어(Query Language)를 이용하여 표현합니다. Rego는 일반적인 imperative 언어와는 조금 다르게 declarative로 동작합니다. 선언적으로 표현되기 때문에 초기 Rego 언어를 이해하는데 조금 시간이 걸립니다. 예를 들어, 필자가 처음 Rego를 접했을 때 당황했던 것은 imperative 언어에서 많이 사용하는 `if`, `while`, `for`와 같은 문법이 Rego 언어에서는 지원하지 않습니다. 물론 조금 다른 방법으로 이러한 기능들을 제공하긴 하지만 처음 그 컨셉을 이해하는데 어색할 수도 있습니다. 저도 아직까지 완벽하게 Rego에 대해 이해한다고 말하긴 어렵지만 OPA 웹페이지에서 제공하는 [여러 튜토리얼](https://www.openpolicyagent.org/docs/latest/kubernetes-tutorial)을 따라하다 보면 쿠버네티스의 간단한 Admission Control 로직 정도는 가볍게 작성할 수 있을 것 같습니다. 또한 OPA에서는 자신이 만든 Policy를 편리하게 검증해 볼 수 있게 [Rego Playground](https://play.openpolicyagent.org)라는 온라인 Query 테스트기를 제공합니다. 처음 Rego라는 언어를 이해하기에 매우 좋은 툴입니다. 자신이 만든 Policy를 실제 적용하기 전에 이 툴을 통해 꼭 검증해 보시기 바랍니다.

그럼 이제 본격적으로 Rego 언어에 대해서 이해해 보는 시간을 가져보도록 하겠습니다. 다음 [예시들은 OPA 공식 사이트](https://www.openpolicyagent.org/docs/latest/policy-language/)에서 나오는 것들을 조금 쉽게 수정하여 설명한 것입니다. 더욱 자세하고 정확한 내용은 해당 사이트를 참고해 주시기 바랍니다.

### Basics

Rego에서 가장 간단한 rule을 선언하기 위해 다음과 같이 표현합니다. `pi`라는 변수가 선언되고 `3.14159`값이 assign 됩니다.

```bash
pi := 3.14159
```

이번에는 조금 새로운 rule을 선언해 봅시다. 아래 표현은 괄호 안의 표현식이 `true`이면 v의 값이 `true`로 선언되고 그렇지 않으면 선언되지 않습니다.(`undefined`) (실제로 `undefined`라는 문자열이 출력되지 않습니다. 이해를 돕기 위해 표시합니다.)

```bash
v { "hello" == "world" }
# undefined

v { "hello" == "hello" }
# true
```

만약 `undefined`가 아닌 `false`가 선언되도록 바꾸고 싶다면 `default`라는 키워드를 사용하면 됩니다.

```bash
default v = false    # 아무런 값이 선언되지 않을 시(undefined), false 값을 선언

v { "hello" == "world" }
# false
```

### For-each expression

이번에는 `for` 표현식을 어떻게 선언하는지 살펴 보겠습니다. 먼저 다음과 같은 리스트가 있습니다.

```bash
sites = ["dev", "stage", "prod"]
```

이때 아래와 같이 선언하면 for each처럼 동작합니다. `_`은 for each item를 나타냅니다. `sites`를 하나씩 순회하며 조건문에 일치하는 item이 있는지 확인하고 있다면 `true`를 그렇지 않다면 `undefined`를 선언합니다.

```bash
foreach { sites[_] == "demo" }
# undefined

foreach { sites[_] == "prod" }
# true
```

이번에는 `_` 키워드를 사용하지 않고 `some`이라는 키워드를 이용하여 동일한 표현을 갖도록 수정해 보겠습니다.

```bash
foreach {
	some i
	sites[i] == "prod"
}
```

`some`이라는 키워드는 명시적으로 조건에 해당하는 값을 찾고자할 때 사용할 수 있습니다. 예를 들어 아래와 같이 `some i`의 값을 `idx`에 저장하면 명시적으로 몇번째 인덱스의 값이 `prod`인지 확인할 수 있씁니다.

```bash
foreach[idx] {
	some i
	sites[i] == "prod"
	idx := i
}
# 2
```

### Generalization Rule

`query` 이라는 rule을 정의하고 이것을 이용하여 다시 `is_in`이라는 rule을 만들어 보겠습니다.

```bash
query[name] { 
	name := sites[_] 
}
# [
#   "dev",
#   "stage",
#   "prod"
# ]

default is_in = false     # 먼저 is_in의 default값을 false로 설정합니다.

is_in { query["demo"] }
# false

is_in { query["prod"] }
# true
```

### Build-in keyword

Playground에서 직접 테스트를 진행해 보기 전에 한가지 내용만 더 설명드리겠습니다. OPA에는 Build-in keyword가 몇가지 있는데 그중에 `input`이라는 녀석이 존재합니다. 해당 document는 사용자로부터 들어오는 input JSON 객체를 의미합니다.

```bash
# 예를 들어 다음과 같은 JSON 객체가 들어 올때,
{
    "message": "world"
}


# hello rule은 true가 선언됩니다.
hello {
    m := input.message
    m == "world"
}
# true
```

여기까지 살펴 보았다면 Playgroun에 가서 직접 테스트해 봅시다!

## Playground

[https://play.openpolicyagent.org/](https://play.openpolicyagent.org/)

![](../assets/images/opa/rego-playground.png)

좌측 패널은 사용자가 직접 Policy를 작성해 볼 수 있는 **editor 공간**입니다. 우측 상단은 **input으로 들어올 JSON 객체**를 정의합니다. 마지막으로 우측 하단은 `Evaluate`이라는 버튼을 눌렀을 때 **Policy의 결과가 나오는 output 패널**입니다.

---

맨 처음으로 나오는 예시는 다음과 같습니다. `package`는 자바와 같이 이름공간을 의미합니다. 앞에서 전부 살펴 본 내용들입니다. 바로 우측 상단의 `Evaluate` 버튼을 눌려 봅시다.

```bash
package play


default hello = false

hello {
    m := input.message
    m == "world"
}
```

`hello: true`라는 결과가 output 패널에 나옵니다. 이번에는 input 패널의 JSON 객체에서 `message`의 값을 `bob`으로 수정해 봅시다.

```bash
{
    "hello": true
}
```

예상한대로 `hello: false`라는 결과가 나옵니다. 

### Example: Hello World

그럼 이제 `The Rego Playground` 제목 옆에 있는 `Examples` dropdown 메뉴를 눌러서 `Kubernetes > Hello World`를 클릭해 봅시다. 다음과 같은 Policy가 나옵니다. 너무 겁 먹을 필요 없이 하나씩 차근차근 살펴 봅시다. 먼저 우측 상단 input 패널에 보이는 JSON 객체는 Part#1에서 Webhook으로 들어오는 input JSON 객체와 100% 동일합니다. 이것은 쿠버네티스가 Webhook이든 OPA든 동일한 input JSON을 전달해주기 때문입니다.

```bash
package kubernetes.validating.label

# `deny` generates a set of error messages. The `msg` value is added to the set
# if the statements in the rule are true. If any of the statements are false or
# undefined, `msg` is not included in the set.
deny[msg] {
	# `input` is a global variable bound to the data sent to OPA by Kubernetes. In Rego,
	# the `.` operator selects keys from objects. If a key is missing, no error
	# is generated. The statement is just undefined.
	value := input.request.object.metadata.labels.costcenter

	# Check if the label value is formatted correctly.
	not startswith(value, "cccode-")

	# Construct an error message to return to the user.
	msg := sprintf("Costcenter code must start with `cccode-`; found `%v`", [value])
}
```

예시의 Rego Policy가 달성하고자 하는 정책을 미리 말씀 드리자면, 요청하는 쿠버네티스 리소스 객체에서 `costcenter`라는 라벨의 값이 `cccode-`로 시작하지 않으면 반려하라는 의미를 갖습니다.

먼저 `deny`라는 rule을 정의하고 그 안에 msg라는 값을 정의하려 합니다. 만약 deny rule 끝까지 true가 evaluate되면 msg에 특정 값(여기서는 문자열 값)이 assign되고 중간에 false가 evaluate되면 msg가 선언되지 않습니다.(undefined)
첫번째 expression은 요청하는 객체의 label에 `costcenter`라는 라벨의 값을 `value`에 assign합니다. 그리고 해당 `value`의 값이 `cccode-`로 시작하는지 확인합니다. 만약 `cccode-`로 시작하지 않는다면 결과적올 true로 선언되어(`not startswith`) 최종적으로 `msg`가 선언됩니다. `msg`에는 대략 다음과 같은 메세지가 assign될 것입니다. `deny: [Costcenter code must start with 'cccode-'; found fakecode]` 해당 rule의 결과가 다시 쿠버네티스로 전달되어 최종적으로 사용자의 요청이 반려(deny)됩니다.

이번에 input JSON 객체에서 `costcenter`의 값을 `cccode-fakecode`로 수정하고 다시 Evaluate 버튼을 눌러 봅시다.

```bash
{
    "deny": []
}
```

이번에는 전과 다르게 `deny`의 결과에 아무런 값이 정의되지 않았습니다. msg가 정의되지 않았기 때문입니다.(`undefined`)

### Example: Image Safety

이번에는 Example에서 `Kubernetes > Image Safety`를 클릭합니다. 해당 예시에서는 사용자가 요청한 `Pod` 리소스의 이미지 주소가 `hooli.com`으로 시작하는지 확인하는 정책입니다. 예를 들어 다음과 같이 동작합니다.

- Pod image `hooli.com/nginx`: `Allowed`
- Pod image `docker.io/nginx`: `Denied`


```bash
package kubernetes.validating.images

deny[msg] {
	# The `some` keyword declares local variables. This rule declares a variable
	# called `i`. The rule asks if there is some array index `i` such that the value
	# of the array element's `"image"` field does not start with "hooli.com/".
	some i
	input.request.kind.kind == "Pod"
	image := input.request.object.spec.containers[i].image
	not startswith(image, "hooli.com/")
	msg := sprintf("Image '%v' comes from untrusted registry", [image])
}
```

앞서 살펴 본 `some` 키워드를 사용하여 모든 이미지를 순회합니다. 이때 사용자의 요청이 `Pod`인지(`input.request.kind.kind`)를 확인하여 해당 `Pod`에 존재하는 모든 컨테이너의 이미지를 `image`라는 변수에 저장합니다. 그리고 난 뒤 각 이미지가 `hooli.com`으로 시작하는지를 확인하여 그렇지 않다면 최종적으로 `msg`를 정의합니다. 이때 `some` 키워드를 사용하지 않고 `_`를 이용하여 표현하자면 다음과 같이 수정할 수 있습니다.


```bash
package kubernetes.validating.images

deny[msg] {
	# The `some` keyword declares local variables. This rule declares a variable
	# called `i`. The rule asks if there is some array index `i` such that the value
	# of the array element's `"image"` field does not start with "hooli.com/".
	input.request.kind.kind == "Pod"
	image := input.request.object.spec.containers[_].image
	not startswith(image, "hooli.com/")
	msg := sprintf("Image '%v' comes from untrusted registry", [image])
}
```

우측 상단의 input 패널에서 두번째 `mysql-backed` 컨테이너의 이미지를 `hooli.com/mysql`로 수정하여 다시 Evaluate해 봅시다. 이번에는 deny 메세지 없이 정상적으로 통과하는 것을 확인할 수 있습니다.

어떤가요? 쿠버네티스의 기본적인 Authorization으로는 불가능했던 정책들이 Rego를 통해서는 몇줄 되지 않지만 엄청나게 강력하게 사용할 수 있지 않나요? Rego의 input으로 쿠버네티스 리소스의 전체 spec이 넘어오기 때문에 생각할 수 있는 거의 모든 정책들을 세밀하게 설정할 수 있습니다.


## 마치며

이번 포스트에서는 General Policy 엔진인 Open Policy Agent가 무엇인지 살펴 보고 Policy를 정의할 수 있는 Rego 언어에 대해 가볍게 알아보았습니다. 다음 포스트에서는 OPA를 직접 쿠버네티스 Dynamic Admission Controller로 연결하여 관리자가 원하는대로 쿠버네티스 사용자의 사용성을 관리할 수 있는지 확인해 보겠습니다.
